* 使用包、Crate 和模块管理不断增长的项目

伴随着项目的增长，你应该通过将代码分解为多个模块和多个文件来组织代码。

一个包可以包含多个二进制 crate 项和一个可选的 crate库。

伴随着包的增长，你可以将包中的部分代码提取出来，做成独立的 crate，这些 crate 则作为外部依赖项。

你在编写代码时可以定义哪些部分是其他代码可以使用的公共部分，以及哪些部分是你有权更改实现细节的私有部分。

Rust有许多功能可以让你管理代码的组织，包括哪些内容可以被公开，哪些内容作为私有部分，以及程序每个作用域中的名字。

- 包（Packages） ：Cargo 的一个功能，它允许你构建、测试和分享 crate。
- Crates ：一个模块的树形结构，它形成了库或二进制项目。 
- 模块（Modules）和 use：允许你控制作用域和路径的私有性。
- 路径（path） ：一个命名例如结构体、函数或模块等项的方式。

** 包和 Crate

*** crate 是 Rust 在编译时最小的代码单位。

如果你用 rustc 而不是 cargo 来编译一个文件，编译器还是会将那个文件认作一个 crate。

crate 可以包含模块，模块可以定义在其他文件，然后和 crate 一起编译，我们会在接下来的章节中遇到。

crate 有两种形式：二进制项和库。

二进制项可以被编译为可执行程序，比如一个命令行程序或者一个 web server。它们必须有一个 main 函数来定义当程序被执行的时候所需要做的事情。

库并没有main 函数，它们也不会编译为可执行程序，它们提供一些诸如函数之类的东西，使其他项目也能使用这些东西。

crate root 是一个源文件，Rust 编译器以它为起始点，并构成你的 crate 的根模块。


*** 包 （package）是提供一系列功能的一个或者多个 crate。

一个包会包含一个 Cargo.toml 文件，阐述如何去构建这些 crate。

Cargo 就是一个包含构建你代码的二进制项的包。Cargo 也包含这些二进制项所依赖的库。

包中可以包含至多一个库 crate(library crate)。

包中可以包含任意多个二进制 crate(binary crate)，但是必须至少包含一个 crate（无论是库的还是二进制的） 。

#+begin_src shell
$ cargo new my-project
    Created binary (application) `my-project` package
$ ls my-project
Cargo.toml
src
$ ls my-project/src
main.rs
#+end_src

Cargo 会给我们的包创建一个 Cargo.toml 文件。查看 Cargo.toml 的内容，会发现并没有提到 src/main.rs，因为 =Cargo 遵循的一个约定:src/main.rs 就是一个与包同名的二进制 crate 的 crate 根。=

=同样的，Cargo 知道如果包目录中包 含 src/lib.rs，则包带有与其同名的库 crate，且 src/lib.rs 是 crate 根。=

crate 根文件将由 Cargo 传递给 rustc 来实际构建库或者二进制项目。

在此，我们有了一个只包含 src/main.rs 的包，意味着它只含有一个名为 my-project 的二进制 crate。 =如果一个包同时含有 src/main.rs 和 src/lib.rs，则它有两个 crate:一个二进制的和一个库的，且名字都与包相同。=

通过将文件放在 src/bin 目录下，一个包可以拥有多个二进制crate:每个src/bin 下的文件都会被编译成一个独立的二进制crate。

** 定义模块来控制作用域与私有性

*** 模块小抄

