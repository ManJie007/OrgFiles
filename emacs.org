#+title: mastering emacs
#+author:  JIE MAN


* First Steps
** on startup

--help    Display the help
-nw        Forces Emacs to run in terminal mode
-q           Do not load an init file (such as init.el)
-Q          Does not load the site-wide startup file , your init file, nor X resources

** Emacs’s client- server mode

~M-x server-start~

~emacs --daemon~

Emacs 26 and up can configure a systemd unit file automatically by running the command ~systemctl --user enable emacs~. 

~emacsclient~
    --help     Displays the help.
    -c            Creates a graphical frame (if X is available) or a terminal frame if X is unavailable.
    -nw         Creates a terminal frame.
    -n            The client will return immediately instead of waiting for you to save your changes.

    =C-x #=
    这会告诉 Emacs，你已经完成了当前文件的编辑
    如果你打开了多个文件，按下 C-x # 后，会切换到下一个文件。
    如果所有文件都已编辑完成，Emacs 会通知 emacsclient，它会退出并将控制权返回给终端。
    这种行为在使用需要 $EDITOR 的工具时非常有用，例如 Git。

Set your =$EDITOR= environment variable to emacsclient and things should just work from then on.

** keys

using Emacs in the Terminal, you can still access the menu bar by pressing =F10=

| keys                             | description                                   |
|----------------------------------+-----------------------------------------------|
| C-d                              | delete-char                                   |
| C-M-d                            | delete-char                                   |
| C-x C-f                          | find-file                                     |
| C-x 8 P                          | insert the paragraph symbol  ¶                |
| C-M-%                            | M-x query-replace-regexp                      |
| C-g                              | cancel command                                |
| M-x                              | Execute Extended Command                      |
| When you press a key             | command called self-insert-command            |
| Universal Arguments C-u          | Represents 4 / execute command n times        |
| C-0 C-9 / M-0 M-9 / C-M-0  C-M-9 | C-u 0 C-u 9                                   |
| append C-h to any prefix key     | list all bindings that belong to that key map |

=Caps Lock as Control=

rebinding your caps lock key to control

** Configuring Emacs
*** Customize Interface
    - Use the Customize interface
    ~M-x customize~
    ~M-x list-colors-display~
    ~M-x info-apropos~

    - Writeelisp
  
*** Evaluating Elisp Code

~M-x eval-buffer~
~M-x eval-region~
  
*** The Package Manager

#+begin_src emacs-lisp

  (setq package-archives
   '(("gnu" . "http://elpa.gnu.org/packages/")
    ("melpa" . "http://melpa.org/packages/")))

#+end_src


~M-x package-list-packages~

~M-x package-install~

~M-x package-refresh-contents~

*** Color Themes

~M-x customize-themes~

** Getting Help
*** The Info Manual

    written in TeXinfo

    ~M-x info~ or =C-h i=

    | Key     | Purpose                                   |
    |---------+-------------------------------------------|
    | [ and ] | Previous / next node                      |
    | l and r | Go back / forward in history              |
    | n and p | Previous / next sibling node              |
    | u       | Goes up one level to a parent node        |
    | SPC     | Scroll one screen at a time               |
    | TAB     | Cycles through cross-references and links |
    | RET     | Opens the active link                     |
    | m       | Prompts for a menu item name and opens it |
    | q       | Closes the info browser                   |


*** Apropos

Emacs 的 apropos 系统 是一个非常强大的工具，可以帮助你快速查找和了解 Emacs 内部的函数、变量、命令等信息。它类似于命令行中的apropos，但功能更加细致和强大，支持按特定类别搜索，并且完全支持正则表达式匹配。

=C-h a= or ~M-x apropos command~

| Command     | Key      | Purpose                                            |
|-------------+----------+----------------------------------------------------|
| ispell-word | M-$      | Check spelling of word under or before the cursor. |
| kill-word   | M-d      |                                                    |
| left-word   | C-<left> | Move point N words to the left                     |
| mark-word   | M-@      | Set mark ArG words away from point.                |

Apropos can sort results by relevancy. To enable this, add:

#+begin_src emacs-lisp

  (setq apropos-sort-by-scores t)

#+end_src

| Command                            |
|------------------------------------|
| M-x apropos                        |
| M-x apropos-command or C-h a       |
| M-x apropos-documentation or C-h d |
| M-x apropos-library                |
| M-x apropos-user-option            |
| M-x apropos-value                  |

*** The Describe System

| Command               | key   |
|-----------------------+-------|
| M-x describe-mode     | C-h m |
| M-x describe-function | C-h f |
| M-x describe-variable | C-h v |
| M-x describe-key      | C-h k |

* Movement

=Caps Lock as Control=

** Basic

=F10 to activate and navigate the menu bar with the keyboard=
~M-x menu-bar-mode~

| Key Binding | Purpose                    |
|-------------+----------------------------|
| C-x C-f     | Find (open) a file         |
| C-x C-s     | Save the buffer            |
| C-x b       | Switch buffer              |
| C-x k       | Kill (close) a buffer      |
| C-x C-b     | Display all open buffers   |
| C-x C-c     | Exits Emacs                |
| ESC ESC ESC | Exits out of ...           |
| C-/         | Undo changes               |
| F10         | Activates the menu bar     |
| C-x C-w     | Writing a buffer to a file |
| C-x s       | Saving all files           |

Shebang（程序加载指令）： 如果文件开头是以 #! 开头（例如 #!/usr/bin/env python 或 #!/bin/bash），Emacs 会根据该加载指令来自动识别文件的模式。

魔法模式检测（Magic Mode Detection）： Emacs 还使用 magic-mode-alist 来匹配文件的开头部分。

自动模式检测（Automatic Mode Detection）： Emacs 使用 auto-mode-alist 变量来匹配文件的扩展名、文件名或文件路径中的部分内容，从而自动选择适当的编辑模式。

*** C-x C-c:ExitsEmacs

| Key Binding | Purpose                                                     |
|-------------+-------------------------------------------------------------|
| Yoryes      | Saves the file                                              |
| NorDEL      | Skips current buffer                                        |
| qorRET      | Aborts the save, continues with exit                        |
| C-g         | Aborts save and the exit                                    |
| \!          | Save all remaining buffers                                  |
| d           | Diff the file on the file system with the one in the buffer |

*** Buffer Switching Alternatives

I recommend =IDO= if you are using Emacsen earlier than version 27, and =FIDO= (a drop-in replacement) for versions 27 or later.

~M-x ido-mode~

~M-x customize-option RET ido-mode RET~

improve IDO’s fuzzy matching by enabling flex matching

~M-x customize-option RET ido-enable-flex-matching RET~

~M-x fido-mode~

There are some completion options related to this mode, but they are under the umbrella group icomplete, the parent completion mechanism FIDO is built in.

~M-x customize-group icomplete~

Additional Completion Frameworks

Some of the more common ones in addition to FIDO and IDO include: =Helm, ivy, Selectrum, Ici- cles, Icomplete=.

*** C-/: Undo

=C-/,C-_,C-x u,Edit -> Undo=

Unlike other editors, Emacs does not have a dedicated redo command, and that has to do with Emacs’s unique undo system known as the =undo ring=.

撤销环（Undo Ring）的工作原理

撤销记录： 每次你在 Emacs 中进行编辑时，编辑历史会被记录在撤销环中，每个撤销记录通常表示为一行文本。撤销环的结构是 环形的，意味着你可以在历史记录之间来回撤销。

撤销头（Head）： 撤销环有一个“头”（head），通常通过 * 标记，它指向 当前缓冲区 最后一次编辑的状态。每当你执行撤销操作时，头指针会移动，指向上一个历史记录，但文本内容不会被删除，只是撤销头的位置发生了变化。

- 撤销环的头指向最新的编辑记录，每次撤销都会将头指向前一个记录，而不是真正删除历史记录。
- 撤销记录是环形的，意味着你可以在历史记录中来回切换。
- 即使撤销了某些内容，这些内容仍然保存在撤销环中，直到你执行足够多的撤销步骤使环为空。

** Window Management

| Key Binding | Purpose                   |
|-------------+---------------------------|
| C-x 0       | Deletes the active window |
| C-x 1       | Deletes other windows     |
| C-x 2       | Split window below        |
| C-x 3       | Split window right        |
| C-x o       | Switch active window      |

Undoing window changes

The mode, ~M-x winner-mode~, remembers your window settings and lets you undo and redo with =C-c <left>= and =C-c <right>= , respectively.

Winner 模式是 Emacs 中一个非常有用的功能，它允许你撤销和重做窗口配置的更改。尤其当你在多个窗口间切换和重排时，Winner 模式可以让你方便地恢复到之前的窗口布局。

~M-x customize-option RET winner-mode RET~

Finally,tomovebetweenwindowsusethecommandC-x o. I find it useful to rebind it to M-o as it’s such a common thing to do.

#+begin_src emacs-lisp
(global-set-key (kbd "M-o") 'other-window)
#+end_src

Directional window selection

=windmove package=

#+begin_src emacs-lisp
(windmove-default-keybindings)
#+end_src

You can now switch windows with your shift key by pressing =S-<left>, S-<right>, S-<up>, S-<down>=.

*** Working with Other Windows

| Key Binding | Purpose                                                        |
|-------------+----------------------------------------------------------------|
| C-x 4 C-f   | Finds a file in the other window                               |
| C-x 4 d     | OpensM-x diredintheotherwindow                                 |
| C-x 4 C-o   | Displays a buffer in the other window                          |
| C-x 4 b     | Switches the buffer in the other window and active that window |
| C-x 4 0     | Kills the buffer and window                                    |
| C-x 4 p     | Run project command in the other window                        |
| C-x 4 C-h   | list commands with prefix C-x 4                                |

If you look closely at the key bindings in the table above, you will see a symmetry between C-x 4 and C-x — indeed, they are almost identical in binding and purpose.

** Frame Management

| Key Binding | Purpose                                |
|-------------+----------------------------------------|
| C-x 5 2     | Create a new frame                     |
| C-x 5 b     | Switch buffer in other frame           |
| C-x 5 0     | Delete active frame                    |
| C-x 5 1     | Delete other frames                    |
| C-x 5 C-f   | Finds a file in the other frame        |
| C-x 5 p     | Run project command in the other frame |
| C-x 5 d     | OpensM-x diredintheotherframe          |
| C-x 5 C-o   | Displays a buffer in the other frame   |

** Tab Bars and Tab Lines

If you’re not using Emacs 27, you can find third-party imple- mentations in the package manager

If you’re using a theme that predates Emacs 27, you may find the color scheme of your theme does not extend to the new faces that govern the =tab bar and tab line modes=. You can customize them by typing ~M-x customize-apropos-faces tab-~.

*** Tab Bar Mode

~M-x customize-option RET tab-bar-mode~

~M-x tab-bar-mode~

The prefix key for tab bar mode is =C-x t=.

| Key Binding        | Purpose                            |
|--------------------+------------------------------------|
| C-x t 2            | Create a new tab                   |
| C-x t 0            | Close the current tab              |
| C-x t RET          | Select tab by name                 |
| C-x t o,C-<tab>    | Next Tab                           |
| C-S-<tab>          | Previous Tab                       |
| C-x t r            | Rename Tab                         |
| C-x t m            | Move tab one position to the right |
| C-x t p            | Run project command in other tab   |
| C-x t t            | Execute command in other tab       |
| C-x t 1            | Close all other tabs               |
| C-x t C-f, C-x t f | Find file in other tab             |
| C-x t b            | Switch to buffer in other tab      |
| C-x t d            | Open Dired in other tab            |

Like the frame, window, and buffer management key bind- ings, the tab bar bindings follow the same pattern: actions that affect other tabs is akin to creating a new tab.

If you dislike seeing the tab bar itself, you can hide it with ~M-x customize-option RET tab-bar-show~, and still benefit from all the capabilities of the tab bar.

| Command        | Purpose                                 |
|----------------+-----------------------------------------|
| M-x tab-list   | Shows an interactive tablist            |
| M-x tab-undo   | Undoes a closed tab for each invocation |
| M-x tab-recent | Switch to the last visited tab          |

 Earlier in Window Management I talked about =winner-mode=, a way of undoing and redoing recent window configurations. It’s not nearly as useful with tab bars as it does not understand tab-specific win- dow configurations.
 
recommend you enable ~M-x tab-bar-history-mode~ with ~M-x customize-option RET tab-bar-history-mode~.

#+begin_src emacs-lisp

  (global-set-key (kbd "M-[") 'tab-bar-history-back)
  (global-set-key (kbd "M-]") 'tab-bar-history-forward)

#+end_src


*** Tab Line Mode

~M-x customize-option RET global-tab-line-mode~;or ~M-x global-tab-line-mode~.

| Key Binding | Purpose                |
|-------------+------------------------|
| C-x <left>  | Select previous buffer |
| C-x <right> | Select next buffer     |


you can customize that with ~M-x customize-option tab-line-tabs-function~ and, say, limit it to buffers of the same major mode. 

** Elemental Movement
*** Navigation Keys

| Key Binding   | Purpose                                             |
|---------------+-----------------------------------------------------|
| <left>, ...   | Arrow keys move by character in all four directions |
| C-<left>, ... | As above, but by word                               |
| <insert>      | Insert key. Activates overwrite-mode                |
| <delete>      | Delete key. Deletes the character after point       |
| <prior>,      | Page up and Page down move up and down              |
| <next>        | nearly one full page                                |
| <home>, <end> | Moves to the beginning or end of line               |

The page up/down buttons will scroll up or down a screenful of text, retaining 2 lines of text for context.

You can change the amount of overlap when you page through text by altering the variable =next-screen-context-lines= directly in your init file or by using Emacs’s customize interface, like so: ~M-x customize-option~, then enter =next-screen-context-lines=.

*** Moving by Character
** Bookmarks and Registers

*** Bookmarkso
That makes Emacs’s bookmarking systm flexible enough for you to book mark files,M-x dired directories, M-x man pages, Org mode, DocView (including PDF files), and info manual pages.Because of Emacs’s RrAMP system, it is therefore also possible to bookmark remote files and directories for speedy access.

they are automatically saved to a bookmark file in =~/.emacs.d/= called =bookmarks=.

The variable =bookmark-default-file= determines where Emacs stores your bookmarks.

The file is plain text (elisp s-expressions, actually) meaning it is possible to edit it manually (if you absolutely must) or merge the files if you regularly add or remove bookmarks from multiple machines.


| Key Binding | Purpose        |
|-------------+----------------|
| C-x r m     | Set a bookmark |
| C-x r l     | Listbookmarks  |
| C-x r b     | Jumptobookmark |


And best of all, like all things Emacs, the bookmark system is flexible enough that elisp hackers can easily extend it with =custom handlers=.

*** Registers

registers are transient.

A register is a single-character store-and-recall mecha- nism for several types of data, including:

- Window configurations and framesets
- Points
- Numbers and text

| Key Binding | Purpose                                |
|-------------+----------------------------------------|
| C-x r n     | Store number in register               |
| C-x r s     | Store region in register               |
| C-x r SPC   | Store point in register                |
| C-x r +     | Increment number in register           |
| C-x r j     | Jump to register                       |
| C-x r i     | Insert content of register             |
| C-x r w     | Store window configuration in register |
| C-x r f     | Store frameset in register             |

A register is a single character only.

When you want to store or recall something, you are asked for a single character to query.

Emacs pops up a preview window after =register-preview-delay= seconds (default 1 second).

There are better packages out there like ~M-x winner-mode~ as I talked about earlier.

To increment it by =prefix-numeric-value (default 1)=, type C-x r + and to increment it by an arbitrary amount,giveit a numeric argument (and a negative one to decrement.) 


** Selections and Regions

The region is always defined as the con- tiguous block of text between the point and the mark.

Therefore, when you make visual selections, you are using Emacs’ =Transient Mark Mode=, also known as =TMM=.

The mark in Emacs is not just for the region. It’s an important tool for jumping around in a buffer as some commands that whisk you away from your current location will leave a mark (a breadcrumb trail, effectively) on the =mark ring= that you can return to later.

One example would be M-< and M-> – the commands for jumping to the beginning and end of the buffer – they both mark your old position before they jump so you can later return to your old position by typing =C-u C-<SPC>=.

Like the undo ring, the mark ring contains all the marks you have placed in a buffer — both directly, using mark commands like =C-<SPC>=; and indirectly, from commands like =M-< and M->=. There is also the global mark ring for commands that work across buffer boundaries.

| Key Binding   | Purpose                                                             |
|---------------+---------------------------------------------------------------------|
| C-<SPC>       | Sets the mark, and toggles the region                               |
| C-u C-<SPC>   | Jumps to the mark, and repeated calls go further back the mark ring |
| S+<left>, ... | Shift selection similar to other editors                            |
| C-x C-x       | Exchanges the point and mark, and reactivates your last region      |

The =C-x C-x= command (called ~exchange-point-and-mark~)

1. A region is acontiguous block bounded by the point and mark.
2. You activate a region with C-<SPC>, which sets the mark then activates the region (if you use TMM, and you should!). Pressing C-<SPC> again deactivates the region.
3. An active region follows the point as you move around but breaks when you use a non-movement command.
4. The mark serves a dual purpose as a beacon you can return to with C-u C-<SPC>, even one you set with C-<SPC> Repeat calls to C-u C-<SPC> go further and further back the =mark ring=.
5. Exchanging the point and mark with C-x C-x re-activates the region and switches your point and mark around.
6. Some Emacs commands don’t care if the region isn’t actually active and work anyway (so be careful).

   you can use the =mouse to click-drag selections= or use the arrow key selection with =S+<arrow key>=.

*** Selection Compatibility Modes

~M-x delete-selection-mode~

~M-x customize-option RET delete-selection-mode~

~shift-select-mode (variable, enabled by default)~

For instance, S-<left>, S-<right>, etc. will region se- lect one character at a time, and C-S-f will do the same but with Emacs’s own movement commands.

~M-x customize-option RET shift-select-mode~

~M-x cua-mode~

cua-mode lets you use C-z, C-x, C-c, and C-v to undo, cut, copy and paste like you would in other programs.

~M-x customize-option RET cua-mode~

*** Setting the Mark

If you want to make precise selections, you are better off using Emacs’s dedicated mark commands:

| Key Binding         | Purpose                     |
|---------------------+-----------------------------|
| M-h                 | Marks the next paragraph    |
| C-x h               | Marks the whole buffer      |
| C-M-h               | Marks the next defun        |
| C-x C-p             | Marks the next page         |
| M-@                 | Marks the next word         |
| C-M-<SPC> and C-M-@ | Marks the next s-expression |
| C-<SPC>, C-g        | Deactivates the region      |

All mark commands append to the existing selection if you already have a region active.

So if you want to mark two words in a row, all you have to do is press M-@ twice or com- bine it with a numeric argument: M-2 M-@. Likewise, you can reverse the direction by using the negative argument modifier.

A lot of mark commands are similar, notably the M-x mark-word command M-@.

However, some mark commands are overridden in some major modes so they work correctly for that particular mode. For instance, in reStructuredText, the M-x mark-defun command bound to C-M-h will select a whole chapter; this is sensible, as there are no defuns (a LISP term for a function) in a text file.

I use C-M-<SPC> all the time. Combine it with a negative argu- ment(C-M-- C-M-<SPC>) to reverse the direction and you can mark s-expressions in reverse easily too.
