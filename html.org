#+title: html
#+author: JIE MAN

本地 Web 服务器 : vscode live preview 插件
网站部署应用 : 

HTML HyperText Markup Language

HTML 是一种用于定义内容结构的标记语言。
HTML 由一系列的元素组成，这些元素可以用来包围不同部分的内容，使其以某种方式呈现或者工作。
一对标签可以为一段文字或者一张图片添加超链接，将文字设置为斜体，改变字号，等等。
HTML（HyperText Markup Language，超文本标记语言）是一种用来告知浏览器如何组织页面的标记语言。

* HTML元素

[[file:./pictures/html/1.png]]

开始标签（Opening tag）：包含元素的名称（本例为 p），及一对包围名称的尖括号。这表示元素从这里开始或者开始起作用——在本例中即段落由此开始。
结束标签（Closing tag）：与开始标签相似，只是其在元素名之前包含了一个正斜杠。这表示元素到这里结束——在本例中即段落在此结束。
内容（Content）：元素的内容，本例中就是所输入的文本本身。
元素（Element）：开始标签、结束标签与内容相结合，便是一个完整的元素。

元素也可以有下图中那样的属性（Attribute）

[[file:./pictures/html/2.png]]

class 属性是可以用于定位元素（以及任何其他有相同 class 值的元素）的标识名称，以便进一步为元素指定样式或进行其他操作时使用。

** 嵌套元素

也可以将一个元素置于其他元素之中——称作嵌套。

#+begin_src html
  <p>My cat is <strong>very</strong> grumpy.</p>
#+end_src

所有的元素都需要正确的打开和关闭，这样才能按你所想的方式展现。

** 块级元素和内联元素

在 HTML 中有两种你需要知道的重要元素类别，块级元素和内联元素。

块级元素在页面中以块的形式展现。一个块级元素出现在它前面的内容之后的新行上。任何跟在块级元素后面的内容也会出现在新的行上。块级元素通常是页面上的结构元素。
例如，一个块级元素可能代表标题、段落、列表、导航菜单或页脚。一个块级元素不会嵌套在一个内联元素里面，但它可能嵌套在另一个块级元素里面。

内联元素通常出现在块级元素中并环绕文档内容的一小部分，而不是一整个段落或者一组内容。内联元素不会导致文本换行。
它通常与文本一起使用，例如，<a> 元素创建一个超链接，<em> 和 <strong> 等元素创建强调。

** 空元素

不包含任何内容的元素称为空元素。

#+begin_src html
  <img src="images/firefox-icon.png" alt="My test image" />
#+end_src

* HTML属性

元素也可以有下图中那样的属性（Attribute）

[[file:./pictures/html/2.png]]

class 属性是可以用于定位元素（以及任何其他有相同 class 值的元素）的标识名称，以便进一步为元素指定样式或进行其他操作时使用。

属性包含元素的额外信息，这些信息不会出现在实际的内容中。

属性必须包含：
  一个空格，它在属性和元素名称之间。如果一个元素具有多个属性，则每个属性之间必须由空格分隔。
  属性名称，后面跟着一个等于号。
  一个属性值，由一对引号（""）引起来。

** 元素 <a> 的——元素 <a> 是锚，它使被标签包裹的内容成为一个超链接。锚元素可以添加多种属性
  
*** herf
这个属性声明超链接的 web 地址。例如 href="https://www.mozilla.org/"。

*** title
title 属性为超链接声明额外的信息，比如你将链接至的那个页面。例如 title="The Mozilla homepage"。当鼠标悬停在超链接上面时，这部分信息将以工具提示的形式显示。

*** target
target 属性用于指定链接如何呈现出来。例如，target="_blank" 将在新标签页中显示链接。如果你希望在当前标签页显示链接，忽略这个属性即可。

** 布尔属性

有时你会看到没有值的属性，这也是完全可以接受的。这些属性被称为布尔属性。布尔属性只能有一个值，这个值一般与属性名称相同。例如，考虑 disabled 属性，你可以将其分配给表单输入元素。用它来禁用表单输入元素，这样用户就不能输入了。被禁用的元素通常有一个灰色的外观。

#+begin_src html
  <input type="text" disabled="disabled" />

  <!--方便起见，我们完全可以将其写成以下形式：-->

  <!-- 使用 disabled 属性来防止终端用户输入文本到输入框中 -->
  <input type="text" disabled />
  
  <!-- 下面这个输入框不包含 disabled 属性，所以用户可以向其中输入 -->
  <input type="text" />

#+end_src

** 省略包围属性值的引号

在某些情况下它是被允许的，但是其他情况下会破坏你的标记。例如，针对之前的链接示例，我们可以像这样写一个只拥有一个 href 属性的版本：

#+begin_src html
  <a href=https://www.mozilla.org/>favorite website</a>

  <!-- 然而，当我们再添加一个 title 属性时，就会出现问题 -->

  <a href=https://www.mozilla.org/ title=The Mozilla homepage>favorite website</a>

#+end_src

此时浏览器会误解你的标记，它会把 title 属性理解为三个属性——title 的属性值为 The，另外还有两个布尔属性 Mozilla 和 homepage，很明显不是我们所期望的！并且在这个编码里面它会报错或者出现异常行为。

我们建议始终添加引号

** 使用单引号还是双引号？

这只是风格的问题，你可以从中选择一个你喜欢的。以下两种情况都可以：

#+begin_src html
<a href='https://www.example.com'>示例站点链接</a>

<a href="https://www.example.com">示例站点链接</a>
#+end_src

但应该注意单引号和双引号不能在一个属性值里面混用。

在一个 HTML 中已使用一种引号，你可以在此引号中嵌套另外一种引号：

#+begin_src html
  <a href="https://www.example.com" title="你觉得'好玩吗'？">示例站点链接</a>
#+end_src

如果你想将英文引号（单引号或双引号）当作文本显示在 html 中，你就必须使用 HTML 实体引用。像这样的代码就会破坏显示：

#+begin_src html
  <a href='https://www.example.com' title='Isn't this fun?'>示例站点链接</a>

  <!-- 要这样做：-->

  <a href="https://www.example.com" title="Isn't this fun?">示例站点链接</a>
#+end_src


* HTML 文档详解

#+begin_src html
  <!doctype html>
  <html lang="en-US">
    <head>
      <meta charset="utf-8" />
      <meta name="viewport" content="width=device-width" />
      <title>My test page</title>
    </head>
    <body>
      <img src="images/firefox-icon.png" alt="My test image" />
    </body>
  </html>
#+end_src

<!doctype html>——文档类型。

早期的 HTML（大约 1991-1992 年）文档类型声明类似于链接，规定了 HTML 页面必须遵从的良好规则，能自动检测错误和其他有用的东西。文档类型使用类似于这样：

#+begin_src html
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
#+end_src

文档类型是一个历史遗留问题，需要包含它才能使其他东西正常工作。现在，只需要知道 <!DOCTYPE html> 是最短的有效文档声明！

<html></html>——<html> 元素。该元素包含整个页面的所有内容，有时候也称作根元素。它还包含 lang 属性，设置页面的主要语种。

<head></head>——<head> 元素。该元素作为想在 HTML 页面中包含但不想向用户显示的内容的容器。包括想在搜索结果中显示的关键字和页面描述、用于设置页面样式的 CSS、字符集声明等等。
  <meta charset="utf-8">——该元素指明你的文档使用 UTF-8 字符编码，UTF-8 包括世界绝大多数书写语言的字符。
  <meta name="viewport" content="width=device-width">——视口元素可以确保页面以视口宽度进行渲染，避免移动端浏览器以比视口更宽的宽度渲染内容，导致内容缩小。
  <title></title>——<title> 元素。该元素设置页面的标题，显示在浏览器标签页上，也作为收藏网页的描述文字。
<body></body>——<body> 元素。该元素包含期望让用户在访问页面时看到的全部内容，包括文本、图像、视频、游戏、可播放的音轨或其他内容。

** 图像

#+begin_src html
  <img src="images/firefox-icon.png" alt="My test image" />
#+end_src
该元素还包括一个替换文字属性 alt。在 alt 属性中，是图像的描述内容。
  
** 标记文本
*** 标题（Heading）

#+begin_src html
  <!-- 4 个级别的标题 -->
  <h1>主标题</h1>
  <h2>顶层标题</h2>
  <h3>子标题</h3>
  <h4>次子标题</h4>
#+end_src
*** 段落（Paragraph）
#+begin_src html
  <p>这是一个段落</p>
#+end_src
*** 列表（List）

最常用的列表类型为：

无序列表（Unordered List）中项目的顺序并不重要，就像购物列表。用一个 <ul> 元素包围。
有序列表（Ordered List）中项目的顺序很重要，就像烹调指南。用一个 <ol> 元素包围。

列表的每个项目用一个列表项目（List Item）元素 <li> 包围。
*** 链接
链接非常重要 — 它们赋予 Web 网络属性。要植入一个链接，我们需要使用一个简单的元素 — <a> — “a”是“anchor”（锚）的缩写。

#+begin_src html
<a href="https://www.mozilla.org/zh-CN/about/manifesto/">
  Mozilla Manifesto
</a>
#+end_src

#+begin_src html

          <!--布尔属性 布尔属性只能有一个值，这个值一般与属性名称相同。 eg : disabled -->
          <openingtag attribute_name = "attribute_value">content<closingtag>

          <!--空元素 img-->
          <openingtag attribute_name = "attribute_value"/>
#+end_src

- 标签可以嵌套
- 块级元素和内联元素
  - 一个块级元素出现在它前面的内容之后的新行上。任何跟在块级元素后面的内容也会出现在新的行上。<p>
  - 内联元素不会导致文本换行。<a> <em> <strong>

* HTML 文档

#+begin_src html

<!doctype html> <!--声明文档类型-->
<html lang="zh-CN"> <!--根元素-->
  <head> <!--包含了所有你想包含在 HTML 页面中但不在 HTML 页面中显示的内容。页面描述 CSS样式 字符集-->
    <meta charset="utf-8" /> <!-- 元数据，比如 <base>、<link>、<script>、<style> 或 <title> -->
    <title>我的测试站点</title>
  </head>
  <body> <!-- 包含了你访问页面时所有显示在页面上的内容 -->
    <p>这是我的页面</p>
  </body>
</html>

#+end_src

** 特殊字符

| < | &lt;   |
| > | &gt;   |
| " | &quot; |
| ' | &apos; |
| & | &amp;  |

** 注释

#+begin_src html

  <!-- this is a comment -->

#+end_src

* HTML Head
** 添加标题

<title> 元素是一项元数据，用于表示整个 HTML 文档的标题（而不是文档内容）。

** 元数据：<meta> 元素

元数据就是描述数据的数据，而 HTML 有一个“官方的”方式来为一个文档添加元数据——<meta> 元素。

指定文档中的字符编码

#+begin_src html
  <head>
    <meta charset="utf-8" />
  </head>
#+end_src

添加作者和描述

许多 <meta> 元素包含了 name 和 content 属性：

name 指定了 meta 元素的类型；说明该元素包含了什么类型的信息。
content 指定了实际的元数据内容。

#+begin_src html
  <head>
    <meta name="author" content="Chris Mills" />
    <meta
    name="description"
    content="The MDN Web Docs Learning Area aims to provide
    complete beginners to the Web with all they need to know to get
    started with developing web sites and applications." />

  </head>
#+end_src

指定一个包括与你的页面内容有关的关键词的描述是有用的，因为它有可能使你的页面在搜索引擎进行的相关搜索中出现得更多（这些行为在术语上被称为：搜索引擎优化 或 SEO）。

其他类型的元数据

当你在网站上查看源码时，你也会发现其他类型的元数据。你在网站上看到的许多功能都是专有创作，旨在向某些网站（如社交网站）提供可使用的特定信息。

例如，Facebook 编写的元数据协议 Open Graph Data 为网站提供了更丰富的元数据。在 MDN Web 文档源代码中，你会发现：

#+begin_src html
  <head>

    <meta
    property="og:image"
    content="https://developer.mozilla.org/mdn-social-share.png" />

    <meta
    property="og:description"
    content="The Mozilla Developer Network (MDN) provides
    information about Open Web technologies including HTML, CSS, and APIs for both Web sites
    and HTML Apps." />

    <meta property="og:title" content="Mozilla Developer Network" />


  </head>
#+end_src

Twitter 还拥有自己的类型的专有元数据协议（称为 Twitter Cards），当网站的 URL 显示在 twitter.com 上时，它具有相似的效果。

** 在你的站点增加自定义图标

为了进一步丰富你的网站设计，你可以在元数据中添加对自定义图标的引用，它们会在某些场景下显示。最常见的用例为 favicon（为“favorites icon”的缩写，在浏览器的“收藏夹”及“书签”列表中显示）。

这个不起眼的图标已经存在很多年了，16 像素的方形图标是第一种类型。你可以看见（取决于浏览器）这些图标出现在浏览器每一个打开的标签页中以及书签面板中的书签页面旁边。

#+begin_src html
  <head>

    <link rel="icon" href="favicon.ico" type="image/x-icon" />

  </head>
#+end_src

如果你确实想了解更多关于所有这些值以及如何选择它们，请阅读 <link> 元素的参考页面。

** 在 HTML 中应用 CSS 和 JavaScript

如今，几乎你使用的所有网站都会使用 CSS 来让网页更加炫酷，并使用 JavaScript 来让网页有交互功能，比如视频播放器、地图、游戏以及更多功能。

<link> 元素经常位于文档的头部，它有 2 个属性，rel="stylesheet" 表明这是文档的样式表，而 href 包含了样式表文件的路径：

#+begin_src html

  <head>
    <link rel="stylesheet" href="my-css-file.css" />
  </head>

#+end_src

<script> 元素也应当放在文档的头部，并包含 src 属性来指向需要加载的 JavaScript 文件路径，同时最好加上 defer 以告诉浏览器在解析完成 HTML 后再加载 JavaScript。这样可以确保在加载脚本之前浏览器已经解析了所有的 HTML 内容。这样你就不会因为 JavaScript 试图访问页面上不存在的 HTML 元素而产生错误。实际上有很多方法来处理在你的页面上加载 JavaScript，但对于现代浏览器来说，这是最可靠的方法（对于其他方法，请阅读脚本加载策略）。

#+begin_src html

  <head>
    <script src="my-js-file.js" defer></script>
  </head>

#+end_src

备注： <script> 元素看起来像一个空元素，但它并不是，因此需要一个结束标记。还可以选择将脚本放入 <script> 元素中，而不是指向外部脚本文件。

** 为文档设定主语言

最后，值得一提的是可以（而且有必要）为站点设定语言，这个可以通过添加 lang 属性到 HTML 开始的标签中来实现（就像 meta-example.html 那样），如下所示：

#+begin_src html

  <html lang="zh-CN">
    ...
  </html>

#+end_src

这在很多方面都很有用。如果你的 HTML 文档的语言设置好了，那么你的 HTML 文档就会被搜索引擎更有效地索引（例如，允许它在特定于语言的结果中正确显示），对于那些使用屏幕阅读器的视障人士也很有用（例如，法语和英语中都有“six”这个单词，但是发音却完全不同）。
