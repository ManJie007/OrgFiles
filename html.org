#+title: html
#+author: JIE MAN

HTML HyperText Markup Language

#+begin_src html

  <!--布尔属性 布尔属性只能有一个值，这个值一般与属性名称相同。 eg : disabled -->
  <openingtag attribute_name = "attribute_value">content<closingtag>

  <!--空元素 img-->
  <openingtag attribute_name = "attribute_value"/>
#+end_src

- 标签可以嵌套
- 块级元素和内联元素
  - 一个块级元素出现在它前面的内容之后的新行上。任何跟在块级元素后面的内容也会出现在新的行上。<p>
  - 内联元素不会导致文本换行。<a> <em> <strong>

    
* HTML 文档

#+begin_src html

<!doctype html> <!--声明文档类型-->
<html lang="zh-CN"> <!--根元素-->
  <head> <!--包含了所有你想包含在 HTML 页面中但不在 HTML 页面中显示的内容。页面描述 CSS样式 字符集-->
    <meta charset="utf-8" /> <!-- 元数据，比如 <base>、<link>、<script>、<style> 或 <title> -->
    <title>我的测试站点</title>
  </head>
  <body> <!-- 包含了你访问页面时所有显示在页面上的内容 -->
    <p>这是我的页面</p>
  </body>
</html>

#+end_src

** 特殊字符

| < | &lt;   |
| > | &gt;   |
| " | &quot; |
| ' | &apos; |
| & | &amp;  |

** 注释

#+begin_src html

  <!-- this is a comment -->

#+end_src

* HTML Head
** 添加标题

<title> 元素是一项元数据，用于表示整个 HTML 文档的标题（而不是文档内容）。

** 元数据：<meta> 元素

元数据就是描述数据的数据，而 HTML 有一个“官方的”方式来为一个文档添加元数据——<meta> 元素。

指定文档中的字符编码

#+begin_src html
  <head>
    <meta charset="utf-8" />
  </head>
#+end_src

添加作者和描述

许多 <meta> 元素包含了 name 和 content 属性：

name 指定了 meta 元素的类型；说明该元素包含了什么类型的信息。
content 指定了实际的元数据内容。

#+begin_src html
  <head>
    <meta name="author" content="Chris Mills" />
    <meta
    name="description"
    content="The MDN Web Docs Learning Area aims to provide
    complete beginners to the Web with all they need to know to get
    started with developing web sites and applications." />

  </head>
#+end_src

指定一个包括与你的页面内容有关的关键词的描述是有用的，因为它有可能使你的页面在搜索引擎进行的相关搜索中出现得更多（这些行为在术语上被称为：搜索引擎优化 或 SEO）。

其他类型的元数据

当你在网站上查看源码时，你也会发现其他类型的元数据。你在网站上看到的许多功能都是专有创作，旨在向某些网站（如社交网站）提供可使用的特定信息。

例如，Facebook 编写的元数据协议 Open Graph Data 为网站提供了更丰富的元数据。在 MDN Web 文档源代码中，你会发现：

#+begin_src html
  <head>

    <meta
    property="og:image"
    content="https://developer.mozilla.org/mdn-social-share.png" />

    <meta
    property="og:description"
    content="The Mozilla Developer Network (MDN) provides
    information about Open Web technologies including HTML, CSS, and APIs for both Web sites
    and HTML Apps." />

    <meta property="og:title" content="Mozilla Developer Network" />


  </head>
#+end_src

Twitter 还拥有自己的类型的专有元数据协议（称为 Twitter Cards），当网站的 URL 显示在 twitter.com 上时，它具有相似的效果。

** 在你的站点增加自定义图标

为了进一步丰富你的网站设计，你可以在元数据中添加对自定义图标的引用，它们会在某些场景下显示。最常见的用例为 favicon（为“favorites icon”的缩写，在浏览器的“收藏夹”及“书签”列表中显示）。

这个不起眼的图标已经存在很多年了，16 像素的方形图标是第一种类型。你可以看见（取决于浏览器）这些图标出现在浏览器每一个打开的标签页中以及书签面板中的书签页面旁边。

#+begin_src html
  <head>

    <link rel="icon" href="favicon.ico" type="image/x-icon" />

  </head>
#+end_src

如果你确实想了解更多关于所有这些值以及如何选择它们，请阅读 <link> 元素的参考页面。

** 在 HTML 中应用 CSS 和 JavaScript

如今，几乎你使用的所有网站都会使用 CSS 来让网页更加炫酷，并使用 JavaScript 来让网页有交互功能，比如视频播放器、地图、游戏以及更多功能。

<link> 元素经常位于文档的头部，它有 2 个属性，rel="stylesheet" 表明这是文档的样式表，而 href 包含了样式表文件的路径：

#+begin_src html

  <head>
    <link rel="stylesheet" href="my-css-file.css" />
  </head>

#+end_src

<script> 元素也应当放在文档的头部，并包含 src 属性来指向需要加载的 JavaScript 文件路径，同时最好加上 defer 以告诉浏览器在解析完成 HTML 后再加载 JavaScript。这样可以确保在加载脚本之前浏览器已经解析了所有的 HTML 内容。这样你就不会因为 JavaScript 试图访问页面上不存在的 HTML 元素而产生错误。实际上有很多方法来处理在你的页面上加载 JavaScript，但对于现代浏览器来说，这是最可靠的方法（对于其他方法，请阅读脚本加载策略）。

#+begin_src html

  <head>
    <script src="my-js-file.js" defer></script>
  </head>

#+end_src

备注： <script> 元素看起来像一个空元素，但它并不是，因此需要一个结束标记。还可以选择将脚本放入 <script> 元素中，而不是指向外部脚本文件。

** 为文档设定主语言

最后，值得一提的是可以（而且有必要）为站点设定语言，这个可以通过添加 lang 属性到 HTML 开始的标签中来实现（就像 meta-example.html 那样），如下所示：

#+begin_src html

  <html lang="zh-CN">
    ...
  </html>

#+end_src

这在很多方面都很有用。如果你的 HTML 文档的语言设置好了，那么你的 HTML 文档就会被搜索引擎更有效地索引（例如，允许它在特定于语言的结果中正确显示），对于那些使用屏幕阅读器的视障人士也很有用（例如，法语和英语中都有“six”这个单词，但是发音却完全不同）。
